diff --git a/src/Plugin/VersionNegotiation/VersionById.php b/src/Plugin/VersionNegotiation/VersionById.php
new file mode 100644
index 0000000..8a6b9be
--- /dev/null
+++ b/src/Plugin/VersionNegotiation/VersionById.php
@@ -0,0 +1,38 @@
+<?php
+
+namespace Drupal\jsonapi\Plugin\VersionNegotiation;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\jsonapi\Revisions\PluginNegotiationBase;
+use Drupal\jsonapi\Revisions\VersionNegotiationInterface;
+
+/**
+ * Defines a revision id implementation for entity revision id values.
+ *
+ * @internal
+ * @VersionNegotiation(
+ *   id = "id",
+ * )
+ */
+class VersionById extends PluginNegotiationBase implements VersionNegotiationInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getRevisionId(EntityInterface $entity, $input_data) {
+    if (!is_numeric($input_data)) {
+      throw new \InvalidArgumentException('The entity revision id must be in integer value for entity ' . $entity->uuid());
+    }
+    // Check if the revision id effectively belong to this entity history.
+    $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
+    if ($storage instanceof RevisionableStorageInterface) {
+      $revision = $storage->loadRevision($input_data);
+      if (!$revision || $revision->id() !== $entity->id()) {
+        throw new \InvalidArgumentException('Invalid revision id value for entity ' . $entity->uuid());
+      }
+    }
+    return $input_data;
+  }
+
+}
diff --git a/src/Plugin/VersionNegotiation/VersionByRel.php b/src/Plugin/VersionNegotiation/VersionByRel.php
new file mode 100644
index 0000000..b4b899a
--- /dev/null
+++ b/src/Plugin/VersionNegotiation/VersionByRel.php
@@ -0,0 +1,127 @@
+<?php
+
+namespace Drupal\jsonapi\Plugin\VersionNegotiation;
+
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Entity\RevisionableInterface;
+use Drupal\Core\Entity\RevisionableStorageInterface;
+use Drupal\Core\Http\Exception\CacheableHttpException;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\jsonapi\Revisions\PluginNegotiationBase;
+use Drupal\jsonapi\Revisions\VersionNegotiationInterface;
+
+/**
+ * Revision id implementation for the current or latest revisions.
+ *
+ * @internal
+ * @VersionNegotiation(
+ *   id = "rel",
+ * )
+ */
+class VersionByRel extends PluginNegotiationBase implements ContainerFactoryPluginInterface, VersionNegotiationInterface {
+
+  /**
+   * The name of the negotiatior.
+   *
+   * @var string
+   */
+  const NAME = 'rel';
+
+  /**
+   * The latest revision id value.
+   *
+   * @var string
+   */
+  const HEAD = 'working-copy';
+
+  /**
+   * The default revision id value.
+   *
+   * @var string
+   */
+  const CURRENT = 'latest-version';
+
+  /**
+   * A default revision previous to the one provided by the input.
+   *
+   * @var string
+   */
+  const PREDECESSOR = 'predecessor-version';
+
+  /**
+   * The next revision for a given input.
+   *
+   * @var string
+   */
+  const COPY_OF = 'working-copy-of';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getRevisionId(EntityInterface $entity, $input_data) {
+    $revision_id = NULL;
+    $handles_versions = $entity instanceof RevisionableInterface
+      && $entity->getEntityType()->isRevisionable();
+    if (!$handles_versions) {
+      throw new \InvalidArgumentException('Revision requested on a non versionable entity ' . $entity->uuid());
+    }
+    try {
+      $storage = $this->entityTypeManager->getStorage($entity->getEntityTypeId());
+    }
+    catch (PluginException $e) {
+      // Cast the exception type to an \InvalidArgumentException.
+      throw new \InvalidArgumentException($e->getMessage(), $e);
+    }
+    switch ($input_data) {
+      case static::CURRENT:
+        $revision_id = $entity->getLoadedRevisionId();
+        break;
+
+      case static::HEAD:
+        if ($storage instanceof RevisionableStorageInterface) {
+          $revision_id = $storage->getLatestRevisionId($entity->id());
+        }
+        break;
+
+      case static::PREDECESSOR:
+      case static::COPY_OF:
+        $this->checkVersionHistorySupport($storage);
+        $message = sprintf('The link relation type %s is not implemented yet.');
+        $cacheability = (new CacheableMetadata())
+          ->addCacheContexts(['url.query_args:resource_version']);
+        // TODO: Implement these.
+        throw new CacheableHttpException(
+          $cacheability,
+          501,
+          $message
+        );
+    }
+    if (empty($revision_id)) {
+      throw new \InvalidArgumentException('Invalid revision id value for entity ' . $entity->uuid());
+    }
+    return $revision_id;
+  }
+
+  /**
+   * Checks if the storage supports listing all the revisions of an entity.
+   *
+   * @param \Drupal\Core\Entity\EntityStorageInterface $storage
+   *   The storage that may or may not support listing revision IDs.
+   *
+   * @throws \InvalidArgumentException
+   *   If the version history is not supported for this storage.
+   */
+  protected function checkVersionHistorySupport(EntityStorageInterface $storage) {
+    if (!method_exists($storage, 'revisionIds')) {
+      $message = sprintf(
+        'The entity type storage for %s does not support version history.',
+        $storage->getEntityTypeId()
+      );
+      throw new \InvalidArgumentException($message);
+    }
+  }
+
+}
diff --git a/src/Revisions/Annotation/VersionNegotiation.php b/src/Revisions/Annotation/VersionNegotiation.php
new file mode 100644
index 0000000..769d9f3
--- /dev/null
+++ b/src/Revisions/Annotation/VersionNegotiation.php
@@ -0,0 +1,27 @@
+<?php
+
+namespace Drupal\jsonapi\Revisions\Annotation;
+
+use Drupal\Component\Annotation\Plugin;
+
+/**
+ * Defines an revision id negoriation annotation object.
+ *
+ * Plugin Namespace: Plugin\VersionNegotiation.
+ *
+ * @see \Drupal\jsonapi\Revisions\VersionNegotiationManager
+ * @see \Drupal\jsonapi\Revisions\VersionNegotiationInterface
+ * @see plugin_api
+ *
+ * @Annotation
+ */
+class VersionNegotiation extends Plugin {
+
+  /**
+   * The revision id plugin ID.
+   *
+   * @var string
+   */
+  public $id;
+
+}
diff --git a/src/Revisions/PluginNegotiationBase.php b/src/Revisions/PluginNegotiationBase.php
new file mode 100644
index 0000000..6aa23dc
--- /dev/null
+++ b/src/Revisions/PluginNegotiationBase.php
@@ -0,0 +1,93 @@
+<?php
+
+namespace Drupal\jsonapi\Revisions;
+
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Plugin\PluginBase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Base implementation for revision negotiator plugins.
+ *
+ * @internal
+ */
+abstract class PluginNegotiationBase extends PluginBase implements ContainerFactoryPluginInterface, VersionNegotiationInterface {
+
+  /**
+   * The entity type manager to load the revision.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Constructs a Drupal\Component\Plugin\PluginBase object.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   */
+  public function __construct(
+    array $configuration,
+    $plugin_id,
+    $plugin_definition,
+    EntityTypeManagerInterface $entity_type_manager
+  ) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+
+    $this->entityTypeManager = $entity_type_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(
+    ContainerInterface $container,
+    array $configuration,
+    $plugin_id,
+    $plugin_definition
+  ) {
+    /** @var \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager */
+    $entity_type_manager = $container->get('entity_type.manager');
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $entity_type_manager
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getRevision(EntityInterface $entity, $input_data) {
+    return $this
+      ->entityTypeManager
+      ->getStorage($entity->getEntityTypeId())
+      ->loadRevision($this->getRevisionId($entity, $input_data));
+  }
+
+  /**
+   * Gets the revision id.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity.
+   * @param string $input_data
+   *   A value used to derive a revision id for the given entity.
+   *
+   * @return int
+   *   The revision id.
+   *
+   * @throws \InvalidArgumentException
+   *   When the revision ID cannot be negotiated.
+   */
+  abstract protected function getRevisionId(EntityInterface $entity, $input_data);
+
+}
diff --git a/src/Revisions/ResourceVersionRouteEnhancer.php b/src/Revisions/ResourceVersionRouteEnhancer.php
new file mode 100644
index 0000000..c4cd01d
--- /dev/null
+++ b/src/Revisions/ResourceVersionRouteEnhancer.php
@@ -0,0 +1,120 @@
+<?php
+
+namespace Drupal\jsonapi\Revisions;
+
+use Drupal\Component\Plugin\Exception\PluginException;
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Http\Exception\CacheableNotFoundHttpException;
+use Drupal\Core\Routing\EnhancerInterface;
+use Drupal\jsonapi\JsonApiSpec;
+use Drupal\jsonapi\Routing\Routes;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * Ensures the loaded entity matches the requested revision ID.
+ *
+ * @internal
+ */
+class ResourceVersionRouteEnhancer implements EnhancerInterface {
+
+  /**
+   * The route default parameter name.
+   *
+   * @var string
+   */
+  const REVISION_ID_KEY = 'revision_id';
+
+  /**
+   * Resource version validation regex.
+   *
+   * @var string
+   */
+  const RESOURCE_VERSION_PARAM_VALIDATOR = '/^[a-z]+[a-z_]*[a-z]+'
+  . VersionNegotiationManager::SEPARATOR
+  . '[a-zA-Z0-9\-]+('
+  . VersionNegotiationManager::SEPARATOR
+  . '[a-zA-Z0-9\-]+)*$/';
+
+  /**
+   * The revision ID negotiation manager.
+   *
+   * @var \Drupal\jsonapi\Revisions\VersionNegotiationManager
+   */
+  protected $revisionNegotiatorManager;
+
+  /**
+   * ResourceVersionRouteEnhancer constructor.
+   *
+   * @param \Drupal\jsonapi\Revisions\VersionNegotiationManager $version_negotiation_manager
+   *   The negotiator plugin manager.
+   */
+  public function __construct(VersionNegotiationManager $version_negotiation_manager) {
+    $this->revisionNegotiatorManager = $version_negotiation_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function enhance(array $defaults, Request $request) {
+    $resource_type = Routes::getResourceTypeNameFromParameters($defaults);
+    if (
+      !$request->query->has(JsonApiSpec::VERSION_QUERY_PARAMETER)
+      || !$resource_type
+      // This is a collection request, there is nothing to enhance.
+      || !isset($defaults[$resource_type->getEntityTypeId()])
+    ) {
+      return $defaults;
+    }
+    /** @var \Drupal\Core\Entity\EntityInterface $entity */
+    $entity = $defaults[$resource_type->getEntityTypeId()];
+
+    $resource_version_identifier = $request->query->get(JsonApiSpec::VERSION_QUERY_PARAMETER);
+
+    if (!static::validResourceVersion($resource_version_identifier) || !$resource_type->isVersionable()) {
+      VersionNegotiationManager::throwBadRequestHttpException($resource_version_identifier);
+    }
+
+    list($negotiator_name, $input_data) = explode(VersionNegotiationManager::SEPARATOR, $resource_version_identifier);
+    $resolved_revision = NULL;
+    try {
+      /** @var \Drupal\jsonapi\Revisions\VersionNegotiationInterface $negotiator */
+      $negotiator = $this->revisionNegotiatorManager->createInstance($negotiator_name);
+      $resolved_revision = $negotiator->getRevision($entity, $input_data);
+    }
+    catch (\InvalidArgumentException $exception) {
+      VersionNegotiationManager::throwBadRequestHttpException($resource_version_identifier);
+    }
+    catch (PluginException $exception) {
+      VersionNegotiationManager::throwBadRequestHttpException($resource_version_identifier);
+    }
+    if (is_null($resolved_revision)) {
+      $cacheability = (new CacheableMetadata())
+        ->addCacheContexts(['url.query_args:' . JsonApiSpec::VERSION_QUERY_PARAMETER])
+        ->addCacheableDependency($entity);
+      throw new CacheableNotFoundHttpException(
+        $cacheability,
+        sprintf(
+          'The requested resource version, identified by `%s`, could not be found.',
+          $resource_version_identifier
+        )
+      );
+    }
+    return [$resource_type->getEntityTypeId() => $resolved_revision] + $defaults;
+  }
+
+  /**
+   * Validates the user input.
+   *
+   * @param string $resource_version
+   *   The requested resource version identifier.
+   *
+   * @return bool
+   *   TRUE if the received resource version value is valid, FALSE otherwise.
+   */
+  protected static function validResourceVersion($resource_version) {
+    $result = preg_match(static::RESOURCE_VERSION_PARAM_VALIDATOR, $resource_version);
+    assert($result || $result === 0, 'Regex failed.');
+    return (bool) $result;
+  }
+
+}
diff --git a/src/Revisions/VersionNegotiationInterface.php b/src/Revisions/VersionNegotiationInterface.php
new file mode 100644
index 0000000..9690690
--- /dev/null
+++ b/src/Revisions/VersionNegotiationInterface.php
@@ -0,0 +1,33 @@
+<?php
+
+namespace Drupal\jsonapi\Revisions;
+
+use Drupal\Core\Entity\EntityInterface;
+
+/**
+ * Defines the common interface for all Revision ID negotiation classes.
+ *
+ * @see \Drupal\jsonapi\Revisions\VersionNegotiationManager
+ * @see \Drupal\jsonapi\Revisions\VersionNegotiation
+ * @see plugin_api
+ * @internal
+ */
+interface VersionNegotiationInterface {
+
+  /**
+   * Gets the revision.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity.
+   * @param string $input_data
+   *   A value used to derive a revision id for the given entity.
+   *
+   * @return \Drupal\Core\Entity\EntityInterface
+   *   The revision id.
+   *
+   * @throws \InvalidArgumentException
+   *   When the revision ID cannot be negotiated.
+   */
+  public function getRevision(EntityInterface $entity, $input_data);
+
+}
diff --git a/src/Revisions/VersionNegotiationManager.php b/src/Revisions/VersionNegotiationManager.php
new file mode 100644
index 0000000..ae9500f
--- /dev/null
+++ b/src/Revisions/VersionNegotiationManager.php
@@ -0,0 +1,67 @@
+<?php
+
+namespace Drupal\jsonapi\Revisions;
+
+use Drupal\Core\Cache\CacheableMetadata;
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Http\Exception\CacheableBadRequestHttpException;
+use Drupal\Core\Plugin\DefaultPluginManager;
+use Drupal\jsonapi\JsonApiSpec;
+
+/**
+ * Provides an Revision ID negoation plugin manager.
+ *
+ * @see \Drupal\jsonapi\Revisions\Annotation\VersionNegotiation
+ * @see \Drupal\jsonapi\Revisions\VersionNegotiationInterface
+ * @see plugin_api
+ * @internal
+ */
+class VersionNegotiationManager extends DefaultPluginManager {
+
+  /**
+   * The separator between the negotiator name and the negotiation ID.
+   *
+   * @var string
+   */
+  const SEPARATOR = ':';
+
+  /**
+   * Constructs a VersionNegotiationManager object.
+   *
+   * @param \Traversable $namespaces
+   *   An object that implements \Traversable which contains the root paths
+   *   keyed by the corresponding namespace to look for plugin implementations.
+   * @param \Drupal\Core\Cache\CacheBackendInterface $cache_backend
+   *   Cache backend instance to use.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $module_handler
+   *   The module handler to invoke the alter hook with.
+   */
+  public function __construct(
+    \Traversable $namespaces,
+    CacheBackendInterface $cache_backend,
+    ModuleHandlerInterface $module_handler
+  ) {
+    parent::__construct('Plugin/VersionNegotiation', $namespaces, $module_handler, 'Drupal\jsonapi\Revisions\VersionNegotiationInterface', 'Drupal\jsonapi\Revisions\Annotation\VersionNegotiation');
+    $this->setCacheBackend($cache_backend, 'revision_id_negoriation_info_plugins');
+  }
+
+  /**
+   * Throws a cacheable error exception.
+   *
+   * @param string $resource_version_identifier
+   *   The user input for the revision negotiation.
+   */
+  public static function throwBadRequestHttpException($resource_version_identifier) {
+    $cacheability = (new CacheableMetadata())
+      ->addCacheContexts(['url.query_args:' . JsonApiSpec::VERSION_QUERY_PARAMETER]);
+    throw new CacheableBadRequestHttpException(
+      $cacheability,
+      sprintf(
+        'A non versionable resource was selected or an invalid resource version identifier was provided: `%s`',
+        $resource_version_identifier
+      )
+    );
+  }
+
+}
diff --git a/tests/src/Kernel/Plugin/VersionNegotiation/VersionByIdTest.php b/tests/src/Kernel/Plugin/VersionNegotiation/VersionByIdTest.php
new file mode 100644
index 0000000..936ea01
--- /dev/null
+++ b/tests/src/Kernel/Plugin/VersionNegotiation/VersionByIdTest.php
@@ -0,0 +1,32 @@
+<?php
+
+namespace Drupal\Tests\jsonapi\Kernel\Plugin\VersionNegotiation;
+
+/**
+ * @coversDefaultClass \Drupal\jsonapi\Plugin\VersionNegotiation\VersionById
+ * @group jsonapi
+ *
+ * @internal
+ */
+class VersionByIdTest extends VersionNegotiationTestBase {
+
+  /**
+   * @covers ::getRevision
+   */
+  public function testOldRevision() {
+    $plugin = $this->buildIdNegotationPlugin('id');
+    $revision = $plugin->getRevision($this->node, $this->nodePreviousRevisionId);
+    $this->assertEquals($this->node->id(), $revision->id());
+    $this->assertEquals($this->nodePreviousRevisionId, $revision->getRevisionId());
+  }
+
+  /**
+   * @covers ::getRevision
+   */
+  public function testInvalidRevision() {
+    $plugin = $this->buildIdNegotationPlugin('id');
+    $this->setExpectedException(\InvalidArgumentException::class);
+    $plugin->getRevision($this->node, $this->node2->getRevisionId());
+  }
+
+}
diff --git a/tests/src/Kernel/Plugin/VersionNegotiation/VersionByRelTest.php b/tests/src/Kernel/Plugin/VersionNegotiation/VersionByRelTest.php
new file mode 100644
index 0000000..e6f98c3
--- /dev/null
+++ b/tests/src/Kernel/Plugin/VersionNegotiation/VersionByRelTest.php
@@ -0,0 +1,44 @@
+<?php
+
+namespace Drupal\Tests\jsonapi\Kernel\Plugin\VersionNegotiation;
+
+use Drupal\jsonapi\Plugin\VersionNegotiation\VersionByRel;
+
+/**
+ * @coversDefaultClass \Drupal\jsonapi\Plugin\VersionNegotiation\VersionByRel
+ * @group jsonapi
+ *
+ * @internal
+ */
+class VersionByRelTest extends VersionNegotiationTestBase {
+
+  /**
+   * @covers ::getRevision
+   */
+  public function testLatestVersion() {
+    $plugin = $this->buildIdNegotationPlugin('rel');
+    $revision = $plugin->getRevision($this->node, VersionByRel::CURRENT);
+    $this->assertEquals($this->node->id(), $revision->id());
+    $this->assertEquals($this->node->getRevisionId(), $revision->getRevisionId());
+  }
+
+  /**
+   * @covers ::getRevision
+   */
+  public function testCurrentVersion() {
+    $plugin = $this->buildIdNegotationPlugin('rel');
+    $revision = $plugin->getRevision($this->node, VersionByRel::HEAD);
+    $this->assertEquals($this->node->id(), $revision->id());
+    $this->assertEquals($this->node->getRevisionId(), $revision->getRevisionId());
+  }
+
+  /**
+   * @covers ::getRevision
+   */
+  public function testInvalidRevision() {
+    $plugin = $this->buildIdNegotationPlugin('rel');
+    $this->setExpectedException(\InvalidArgumentException::class);
+    $plugin->getRevision($this->node, 'erroneous-revision-name');
+  }
+
+}
diff --git a/tests/src/Kernel/Plugin/VersionNegotiation/VersionNegotiationTestBase.php b/tests/src/Kernel/Plugin/VersionNegotiation/VersionNegotiationTestBase.php
new file mode 100644
index 0000000..1625437
--- /dev/null
+++ b/tests/src/Kernel/Plugin/VersionNegotiation/VersionNegotiationTestBase.php
@@ -0,0 +1,115 @@
+<?php
+
+namespace Drupal\Tests\jsonapi\Kernel\Plugin\VersionNegotiation;
+
+use Drupal\node\Entity\Node;
+use Drupal\node\Entity\NodeType;
+use Drupal\Tests\jsonapi\Kernel\JsonapiKernelTestBase;
+use Drupal\user\Entity\User;
+
+/**
+ * The base test class the version negotiation.
+ */
+abstract class VersionNegotiationTestBase extends JsonapiKernelTestBase {
+
+  /**
+   * The user.
+   *
+   * @var \Drupal\user\Entity\User
+   */
+  protected $user;
+
+  /**
+   * The node.
+   *
+   * @var \Drupal\node\Entity\Node
+   */
+  protected $node;
+
+  /**
+   * The previous revision id of $node.
+   *
+   * @var string
+   */
+  protected $nodePreviousRevisionId;
+
+  /**
+   * The other node.
+   *
+   * @var \Drupal\node\Entity\Node
+   */
+  protected $node2;
+
+  public static $modules = [
+    'node',
+    'field',
+    'jsonapi',
+    'serialization',
+    'system',
+    'user',
+  ];
+
+  /**
+   * Initialization tasks for the test.
+   *
+   * @inheritdoc
+   */
+  protected function setUp() {
+    parent::setUp();
+    // Add the entity schemas.
+    $this->installEntitySchema('node');
+    $this->installEntitySchema('user');
+    // Add the additional table schemas.
+    $this->installSchema('system', ['sequences']);
+    $this->installSchema('node', ['node_access']);
+    $this->installSchema('user', ['users_data']);
+    $type = NodeType::create([
+      'type' => 'dummy',
+      'new_revision' => TRUE,
+    ]);
+    $type->save();
+
+    $this->user = User::create([
+      'name' => 'user1',
+      'mail' => 'user@localhost',
+      'status' => 1,
+    ]);
+    $this->user->save();
+
+    $this->node = Node::create([
+      'title' => 'dummy_title',
+      'type' => 'dummy',
+      'uid' => $this->user->id(),
+    ]);
+    $this->node->save();
+
+    $this->nodePreviousRevisionId = $this->node->getRevisionId();
+
+    $this->node->setNewRevision();
+    $this->node->setTitle('revised_dummy_title');
+    $this->node->save();
+
+    $this->node2 = Node::create([
+      'type' => 'dummy',
+      'title' => 'Another test node',
+      'uid' => $this->user->id(),
+    ]);
+    $this->node2->save();
+  }
+
+  /**
+   * Returns an instance of a revision id negotiation plugin.
+   *
+   * @param string $pluginId
+   *   The plugin id.
+   *
+   * @return VersionNegotiationInterface
+   *   The plugin instance.
+   *
+   * @throws \Exception
+   */
+  protected function buildIdNegotationPlugin($pluginId) {
+    return $this->container->get('plugin.manager.version_negotiation')->createInstance($pluginId);
+  }
+
+}
