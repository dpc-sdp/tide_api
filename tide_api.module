<?php

/**
 * @file
 * Tide API module functionality.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\CsrfRequestHeaderAccessCheck;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\Component\Utility\Random;
use Drupal\jsonapi\Routing\Routes;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function tide_api_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add preview link to revisions form.
  if ($form_id == 'revision_overview_form') {
    // Get token generator to fetch token for current user.
    $tokenGenerator = \Drupal::service('csrf_token');

    $randomiser = new Random();

    // Load services helpers to calculate node url to be used in
    // Front End Preview.
    $aliasManager = \Drupal::service('path.alias_manager');
    $siteHelper = \Drupal::service('tide_site.helper');
    $siteAliasStorage = \Drupal::service('tide_site.alias_storage_helper');
    $requestStack = \Drupal::service('request_stack');
    $sessionConfiguration = \Drupal::service('session_configuration');

    // Get session options.
    $sessionOptions = $sessionConfiguration->getOptions($requestStack->getCurrentRequest());

    foreach ($form['node_revisions_table'] as $key => $row) {
      if (is_numeric($key) && isset($row['operations']['#links'])) {
        // Get current node revision details and token.
        $route_params = $form['node_revisions_table'][$key]['operations']['#links']['delete']['url']->getRouteParameters();
        $route_params['token'] = $tokenGenerator->get(CsrfRequestHeaderAccessCheck::TOKEN_KEY);

        $node = Node::load($route_params['node']);

        $alias = $aliasManager->getAliasByPath('/node/' . $route_params['node']);
        $uri = $siteHelper->getEntityPrimarySiteBaseUrl($node) . $siteAliasStorage->getPathAliasWithoutSitePrefix(['alias' => $alias]);

        // Unset some route parameters not required.
        unset($route_params['langcode']);
        unset($route_params['node']);

        // Rename node_revision by id, to be used in JSON API call.
        $route_params['resource_version'] = 'id:' . $route_params['node_revision'];
        unset($route_params['node_revision']);

        // Set session name and session value to be used as cookie from
        // client request.
        $route_params['session_name'] = $sessionOptions['name'];
        $route_params['session_value'] = $requestStack->getCurrentRequest()->cookies->get($sessionOptions['name']);

        // Set random parameter to avoid CDN cache between changes in preview.
        $route_params['randomiser'] = $randomiser->string(32);

        // Add new operation to preview revisions different that default
        // revision published.
        $form['node_revisions_table'][$key]['operations']['#links']['preview'] = [
          'title' => t('Preview'),
          'url' => Url::fromUri($uri, [
            'query' => $route_params,
            'attributes' => ['target' => '_blank'],
          ]),
        ];
      }
    }
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function tide_api_form_node_form_alter(&$form, $form_state) {
  // Hide Drupal Preview button.
  unset($form['actions']['preview']);

  // @TODO This part must be separated to Tide Site.
  // Replace preview action to save and generate preview link.
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  // Only generate the preview link for existing nodes.
  if (!$node->isNew()) {
    $form['actions']['submit']['#submit'][] = 'tide_api_generate_preview_link';
  }
}

/**
 * Create link to preview latest change.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 */
function tide_api_generate_preview_link(array &$form, FormStateInterface $form_state) {
  try {
    $route_params = [];

    /** @var \Drupal\node\NodeInterface $node */
    $node = $form_state->getFormObject()->getEntity();

    // Get token generator to fetch token for current user.
    $tokenGenerator = \Drupal::service('csrf_token');

    $randomiser = new Random();

    // Load services helpers to calculate node url to be used in
    // Front End Preview.
    $aliasManager = \Drupal::service('path.alias_manager');
    /** @var \Drupal\tide_site\TideSiteHelper $siteHelper */
    $siteHelper = \Drupal::service('tide_site.helper');
    $siteAliasStorage = \Drupal::service('tide_site.alias_storage_helper');
    $requestStack = \Drupal::service('request_stack');
    $sessionConfiguration = \Drupal::service('session_configuration');
    $messenger = \Drupal::service('messenger');

    // Get session options.
    $sessionOptions = $sessionConfiguration->getOptions($requestStack->getCurrentRequest());

    $alias = $aliasManager->getAliasByPath('/node/' . $node->id());
    // Only generate preview link for node of site with a valid domain/base URL.
    $primary_site = $siteHelper->getEntityPrimarySite($node);
    if (!$primary_site) {
      return;
    }
    $site_base_url = $siteHelper->getSiteBaseUrl($primary_site);
    if (!$site_base_url) {
      return;
    }
    $uri = $siteHelper->getEntityPrimarySiteBaseUrl($node) . $siteAliasStorage->getPathAliasWithoutSitePrefix(['alias' => $alias]);

    // Get current user token.
    $route_params['token'] = $tokenGenerator->get(CsrfRequestHeaderAccessCheck::TOKEN_KEY);

    // Rename node_revision by id, to be used in JSON API call.
    $route_params['resource_version'] = 'rel:working-copy';

    // Set session name and session value to be used as cookie from
    // client request.
    $route_params['session_name'] = $sessionOptions['name'];
    $route_params['session_value'] = $requestStack->getCurrentRequest()->cookies->get($sessionOptions['name']);

    // Set random parameter to avoid CDN cache between changes in preview.
    $route_params['randomiser'] = $randomiser->string(32);

    // Set url and link.
    $url = Url::fromUri($uri, [
      'query' => $route_params,
      'attributes' => ['target' => '_blank'],
    ]);
    $link = Link::fromTextAndUrl(t('Click here to Preview Content'), $url);

    $messenger->addMessage($link);
  }
  catch (Exception $exception) {
    watchdog_exception('tide_api', $exception);
  }
}

/**
 * Implements hook_entity_access().
 */
function tide_api_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() == 'menu' || $entity->getEntityTypeId() == 'menu_link_content') {
    if ($operation == 'view') {
      if (Routes::isJsonApiRequest(\Drupal::request()->attributes->all())) {
        return AccessResult::allowed()->cachePerUser();
      }
    }
  }
  return AccessResult::neutral();
}

/**
 * Implements hook_jsonapi_entity_filter_access().
 */
function tide_api_jsonapi_entity_filter_access(EntityTypeInterface $entity_type, AccountInterface $account) {
  if (in_array($entity_type->id(), ['node', 'paragraph'])) {
    return [
      JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowedIfHasPermission($account, 'access content')->cachePerPermissions(),
    ];
  }
  elseif ($entity_type->id() == 'media') {
    return [
      JSONAPI_FILTER_AMONG_PUBLISHED => AccessResult::allowedIfHasPermission($account, 'view media')->cachePerPermissions(),
    ];
  }
  elseif (in_array($entity_type->id(), ['menu', 'menu_link_content'])) {
    return [
      JSONAPI_FILTER_AMONG_ALL => AccessResult::allowed()->cachePerPermissions(),
    ];
  }

  return [JSONAPI_FILTER_AMONG_ALL => AccessResult::neutral()];
}
